@startuml
skinparam style strictuml
skinparam classAttributeIconSize 0
skinparam classFontStyle Bold
hide enum methods
skinparam roundcorner 20
skinparam classBackgroundColor #wheat


class LauncherKingdomino{
    +{static} main( args:String[] )
}

package utilities {
    class CSVReader{
        +CSVReader()
        {static}+readCSV(path:String):String[][]
    }

}

package Model #salmon;line:red{

    class Game {
        {static}-instance:Game
        -Game()
        {static}+getInstance()
        +setGameMode()
        +setNumberPlayer()
        +createPlayers()
        +createDeck()

        +notifyObservers()
    }

    interface Observer<<interface>>{
       +update(game:Game)
    }

    package Entities #indianred{
        Graph "0..*\n-_arrayTiles" *-> Tile : <<composed of>> >

        class Graph {
            +Graph()
            +setDomino(domino:Domino, x:Integer, y:Integer)
            +isPlaceAvailable(x:Integer, y:Integer):Boolean
            +setCastle(x:Integer, y:Integer, castle:Castle)

        }

        class King{
            {static}-COLOR_USED: Collection<KINGCOLOR>
            {static}-RAND: Integer
            {static}-SIZE: Integer

            +King()
            +randomChose(): KINGCOLOR
        }


        Deck "-_listDominoes\n0..*" *-> Domino : <<composed of>> >


        class Deck{
            {static}-rand:Integer{readOnly}
            -maxsize:Integer
            +Deck()
            -generateDomino(i:Integer, dataCSV:String[][])
            +getStack()
            +shuffle()
            +giveADomino()
        }

        Domino "-_arrayTiles\n0..2" *-l-> Tile : <<has>> >
        class Domino {
           -id:Integer
           +Domino(id:Integer, tile1:Tile, tile2:Tile)
           -setTile(tile1:Tile, tile2:Tile)
           +isXX():Boolean
           +isXY():Boolean
           +getTile():Tile[][]
           +rotate()
        }

        class Tile{
           -suitColor:String
           -crownsSuit:Integer
           +Tile(suitColor, crownsSuit)
           +Tile()
        }

        Player "1\n-_graph" *--> Graph : > <<has>>
        Player "1..*\n-_king"*-> King : > <<has>>
        Player "1\n-_castle" *-l-> Castle : > <<has>>
        class Player {
            +Player()
        }

        class Castle extends Tile{

        }

        enum KINGCOLOR {
            +PINK
            +YELLOW
            +GREEN
            +BLUE
        }

    }


    package Set #indianred {

        class NumberPlayer{
            -_numberPlayers: Integer
            +NumberPlayer()
            +setStrategyPlayer(strategy: NumberPlayerStrategy)
            +executeStrategy()
            +setNumberPlayers(players: Integer)
         }

        NumberPlayer o--> "-_strategy\n1"NumberPlayerStrategy: > <<select>>

        package Number{
            class Duo implements NumberPlayerStrategy
            {
                +setNumberPlayers(player: NumberPlayer)
            }

            class Trio implements NumberPlayerStrategy
            {
                +setNumberPlayers(player: NumberPlayer)
            }

            class Quatro implements NumberPlayerStrategy
            {
                +setNumberPlayers(player: NumberPlayer)
            }
        }

        Game ..> GameModeFactory : <<use>> >
        GameModeFactory ..> GameMode : <<use>> >

        class GameModeFactory{
            +GameModeFactory()
            +createMiddleKingdom(): GameMode
            +createHarmony(): GameMode
            +createMightyDuel(): GameMode
        }

        abstract GameMode<<abstract>>{
            -_isSevenSize: Boolean
            -_numberBonus: Integer
            +executeGameMode()
            {abstract}+numberBonus(): Integer
            {abstract}+sizeGraph(): Boolean
        }


            package mode{
                class MiddleKingdom extends GameMode{
                    +numberBonus(): Integer
                    +sizeGraph(): Boolean
                }

                class Harmony extends GameMode{
                    +numberBonus(): Integer
                    +sizeGraph(): Boolean
                }

                class MightyDuel extends GameMode{
                    +numberBonus(): Integer
                    +sizeGraph(): Boolean
                }

                GameModeFactory ..> MiddleKingdom: <<use>> >
                GameModeFactory ..> Harmony: <<use>> >
                GameModeFactory ..> MightyDuel: <<use>> >
            }

    }

    interface NumberPlayerStrategy<<interface>>{
        +strategyPlayer()
    }
}

package View #lightgreen;line:green{
    Window ..> KingDominoStart : <<use>> >
    KingDominoStart ..> KingDominoGame : <<use>> >
    KingDominoGame ..> KingDominoEnd: <<use>> >

    class Window implements Observer
    {
        +Window(game:Game, controller:Controller)
        +update(observer:Observer)
    }

    class KingDominoStart implements Observer
    {
        +KingDominoStart()
    }

    class KingDominoGame implements Observer
    {

    }

    class KingDominoEnd implements Observer
    {

    }
}

package Controller #gold;line:goldenrod {

    class Controller{
        +launchGame()
    }

}

    Window ..> Controller :<<use>> >
LauncherKingdomino .> Window : <<create>> >
LauncherKingdomino .> Controller : <<create>> >

Game "1\n-_gamemode"*-u-> GameMode : <<has>> >
Game "1\n-_numberplayer" *--> NumberPlayer : <<has>> >
Game "1\n-_deck" *-> Deck : <<has>> >
Game "2..*\n-_listPlayers" *--> Player : <<has>> >


Controller ..> Game : <<use>> >
Game *-l-> Observer : "0..*\n-_observer"<<notify>> >
King *-r-> "1\n-_kingColor" KINGCOLOR : <<has>> >
Deck .d.> CSVReader : <<use>> >

@enduml