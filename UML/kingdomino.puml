@startuml
skinparam style strictuml
skinparam classAttributeIconSize 0
skinparam classFontStyle Bold
hide enum methods

class LauncherKingdomino{
    + {static} main( args:String[] )
}

package Model{

    class Game {
        {static}-instance:Game
        -Game()
        {static}+getInstance()
        +setGameMode()
        +setNumberPlayer()
        +createPlayers()
        +createDeck()

        +notifyObservers()
    }

    interface Observer<<interface>>{
       +update(game:Game)
    }

    package Entities{
            Graph "0..*\n-_arrayDominoes" *-l-> Domino : <<composed of>> >
            class Graph {
                +Graph()
                +getDomino(x:Integer, y:Integer):Domino
                +setDomino(domino:Dominoes)
                +getKing():King
                +setKing(king:King)

            }
            class King{

            }


        Deck "-_listDominoes\n0..*" *--> Domino : <<composed of>> >
            class Deck{
                +Deck()
                +getStack()
                +shuffle()
                +giveADomino()
            }

            Domino "-_arrayTiles\n0..2" *-l-> Tile : <<has>> >
            class Domino {
               -id:Integer
               +Domino(id:Integer, tile1:Tile, tile2:Tile)
               +setTile()
            }

            class Tile{
               -suitColor:String
               -crownsSuit:Integer
               +Tile(suitColor, crownsSuit)
            }

            Player "1\n-_graph" *--> Graph : > <<has>>
            Player *-l-> King : > <<has>>
            Player "1\n-_castle" *-> Castle : > <<has>>
            class Player {

            }

            class Castle{

            }

            enum KINGCOLOR {
                +PINK
                +YELLOW
                +GREEN
                +BLUE
            }

    }


    package Set{
        class NumberPlayer{
                +setStrategyPlayer()
                +executeStrategy()
         }

        NumberPlayer o--> "-_strategy\n1"NumberPlayerStrategy: > <<select>>

        package Number{
                class Duo implements NumberPlayerStrategy
                {

                }

                class AboveTwo implements NumberPlayerStrategy
                {

                }
        }


            class GameMode{
                +setStrategy()
                +executeStrategy()
            }

            GameMode o-> "-_strategy\n1"GameModeStrategy : > <<select>>

            interface GameModeStrategy<<interface>>{
                gameModeStrategy()
            }


            package Mode{
                class MiddleKingdom extends GameMode{

                }

                class Harmony implements GameModeStrategy{

                }

                class MightyDuel implements GameModeStrategy{

                }
            }

    }

    interface NumberPlayerStrategy<<interface>>{
        +strategyPlayer()
    }




}

package View {
    Window ..> KingDominoStart : <<use>> >
    KingDominoStart ..> KingDominoGame : <<use>> >
     KingDominoGame ..> KingDominoEnd: <<use>> >
    class Window implements Observer
    {
        +Window(game:Game, controller:Controller)
        +update(observer:Observer)
    }

    class KingDominoStart implements Observer
    {
        +KingDominoStart()
    }

    class KingDominoGame implements Observer
    {

    }

    class KingDominoEnd implements Observer
    {

    }
}

package Controller {

    class Controller{
        +launchGame()
    }

}

LauncherKingdomino ..> Window : <<create>> >
LauncherKingdomino ..> Controller : <<create>> >
Game "1\n-_gamemode"*--> GameMode : <<has>> >
Game "1\n-_numberplayer" *--> NumberPlayer : <<has>> >
Game "1\n-_deck" *--> Deck : <<has>> >
Game "2..*\n-_listPlayers" *-> Player : <<has>> >
Controller ..> Game : <<use>> >
Game *-l-> Observer : "0..*\n-_observer"<<notify>> >
King *-l-> "1\n- _color" KINGCOLOR : <<has>> >

@enduml