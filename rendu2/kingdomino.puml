@startuml
skinparam style strictuml
skinparam classAttributeIconSize 0
skinparam classFontStyle Bold
hide enum methods
skinparam roundcorner 20
skinparam linetype polyline
skinparam linetype ortho
skinparam classBackgroundColor #wheat
skinparam nodesep 100
skinparam ranksep 200

class LauncherKingdomino{
    +{static}main(args:String[])
}

package Utilities {
    class CSVReader{
        +CSVReader()
        {static}+readCSV(path:String):String[][]
    }

    class FontUtilities {
        +FontUtilities()
        {static}+setFont(path:String): Font
    }

}

package Model #salmon;line:red{

    class Game {
        -_intPlayer: Integer
        -_listGameModeString: String[]
        -_dominoesLeft: Boolean
        +Game()
        +addGameMode(gameMode: GameMode)
        +factorHarmonyMode()
        +factorMiddleKingdom()
        +setNumberPlayer(strategy: NumberPlayerStrategy)
        +getNumberPlayer(): Integer
        +setTwoPlayers()
        +setThreePlayers()
        +setQuatroPlayers()
        +createPlayers(numberPlayer: Integer)
        +setCastlePlayer(index:Integer, x:Integer, y:Integer)
        +createDeck(numberPlayer: Integer)
        +getPlayer(index:Integer): Player
        +getActualDominoes(): Domino[]
        +putDominoOnTable()
        +sortDominoTable(n: Integer)
        +rotateDomino(index:Integer)
        +reverseDomino(index:Integer)
        +setDirectionDomino(index:Integer. direction:Integer)
        +setDominoOnGraph(indexDomino:Integer. indexPlayer:Integer, x:Integer, y:Integer)
        +getErrorMessageSetDomino(indexPlayer: Integer): String
        +isXX(index:Integer):Boolean
        +isXY(index:Integer):Boolean
        +getColorTile(index:Integer, x:Integer, y:Integer):String
        +addObservers(observer: Observer)
        +notifyObservers()
        +notifyObserversRotation()
        +notifyObserverDominoGraph()
        +isDominoesLeft(): Boolean
        +calculateScores()
        +getListGameMode(): GameMode[]
        +getListGameModeString(): String[]
    }

    interface Observer<<interface>>{
       +updateDominoesOnTable(game:Game)
       +updateDominoPreview(game:Game)
       +updatePlayerGraph(game:Game)
    }

    package Entities #indianred{
        Graph *-> "0..*\n-_arrayTiles{readOnly}" Tile  : has >

        class Graph {
            -_errorMessage: String
            +Graph()
            +setDomino(domino:Domino, x:Integer, y:Integer)
            +isSameTile(tile1:Tile , tile2:Tile):Boolean
            +isPlaceAvailable(x:Integer, y:Integer):Boolean
            +setCastle(x:Integer, y:Integer, castle:Castle)
            +isCastleHere(x:Integer, y:Integer): Boolean
            +getErrorMessage(): String
            +getTiles():Tile[]
            +isCompleted(): Boolean
            +isCastleOnMiddle(): Boolean
            -countCells(matrix: Integer[], i:Integer, j:Integer)
            -countCrowns(matrix: Integer[], graph: Tile[], i:Integer, j:Integer, v:Integer)
            +getSizeOfADomain(type: String): Integer[]
        }

        King ..> KINGCOLOR : "1\n{static}-_colorUsed{readOnly}" <<use>> >
        class King{
            {static}-_rand: Integer
            {static}-_size: Integer

            +King()
            -randomChose(): KINGCOLOR
            +getKingColor():KINGCOLOR
            +colorToString(): String
        }


        Deck *-> Domino : "-_listDominoes{readOnly}\n1..*" has >


        class Deck{
            {static}-rand:Integer{readOnly}
            +Deck(numberPlayer: Integer)
            -removeDomino(iteration: Integer)
            -generateDomino(i:Integer, dataCSV:String[])
            +getStack(): Collection<Domino>
            +shuffle()
            +giveADomino(): Domino
            +getListdominoes(): Domino[]
        }

        Domino *-l-> "-_arrayTiles{readOnly}\n0..2"  Tile : has >
        class Domino {
           -id:Integer{readOnly}
           -rightSide: Boolean
           -leftSide: Boolean
           -upSide: Boolean
           -downSide: Boolean
           +Domino(id:Integer, tile1:Tile, tile2:Tile)
           -setTile(tile1:Tile, tile2:Tile)
           +isXX():Boolean
           +isXY():Boolean
           +getTile():Tile[]
           +getId(): Integer
           +rotate()
           +reverse()
           +setRightSide()
           +setLeftSide()
           +setUpSide()
           +setDownSide()
           +isRightSide(): Boolean
           +isLeftSide(): Boolean
           +isUpSide(): Boolean
           +isDownSide(): Boolean
           +getColor(x:Integer, y:Integer):String
        }

        class Tile{
           -_color:String
           -_crowns{readOnly}:Integer
           +Tile(suitColor, crownsSuit)
           +Tile()
           +setColorTile(color: String)
           +getCrowns() Integer
           +getColor(): String
        }

        Player *--> "1\n-_graph" Graph : > has
        Player *-> "1\n-_king{readOnly}" King : > has
        Player *-l-> "1\n-_castle" Castle : > has
        Player ..> KINGCOLOR : > <<use>>

        class Player {
            -_yellowTilesScoreList: Integer[]
            -_darkGreenTilesScoreList: Integer[]
            -_blueTilesScoreList: Integer[]
            -_blackTilesScoreList: Integer[]
            -_brownTilesScoreList: Integer[]
            -_lightGreenTilesScoreList: Integer[]
            -_totalTilesScoreList{readOnly}: Integer[]
            -_totalScore: Integer
            -_yellowTilesScore: Integer
            -_darkGreenTilesScore: Integer
            -_blueTilesScore: Integer
            -_blackTilesScore: Integer
            -_brownTilesScore: Integer
            -_lightGreenTilesScore: Integer
            -_bonus: Integer
            +Player()
            +setCastle(x:Integer, y:Integer)
            +getGraph():Graph
            +getKing():KINGCOLOR
            +getTotalScore(): Integer
            +calculateTotalScore()
            +calculateTotalScoreDomain(list: Integer[]): Integer
            +addBonus(gameMode: GameMode)
            +setYellowTilesScoreList(_yellowTilesScoreList : Integer[])
            +setDarkGreenTilesScoreList(_darkGreenTilesScoreList : Integer[])
            +setBlueTilesScoreList(_blueTilesScoreList : Integer[])
            +setBlackTilesScoreList(_blackTilesScoreList : Integer[])
            +setBrownTilesScoreList(_brownTilesScoreList : Integer[])
            +setLightGreenTilesScoreList(_lightGreenTilesScoreList : Integer[])
            +getYellowTilesScore(): Integer
            +getDarkGreenTilesScore(): Integer
            +getBlueTilesScore(): Integer
            +getBlackTilesScore(): Integer
            +getBrownTilesScore(): Integer
            +getLightGreenTilesScore(): Integer
            +addBonus(b: Integer)
        }

        class Castle extends Tile{
            +Castle(color: String)
        }

        enum KINGCOLOR <<enumeration>> {
            +PINK
            +YELLOW
            +GREEN
            +BLUE
        }
    }


    package Set #indianred {

        class NumberPlayer{
            -_numberPlayers: Integer
            +NumberPlayer()
            +setStrategyPlayer(strategy: NumberPlayerStrategy)
            +setNumberPlayers(players: Integer)
            +getNumberPlayers(): Integer
            +getTwoPlayers(): Duo
            +getThreePlayers(): Trio
            +getQuatroPlayers(): Quatro
         }

        NumberPlayer o--> NumberPlayerStrategy : "1\n-_strategy" > choose

        package Number{
            class Duo implements NumberPlayerStrategy
            {
                {override}+setNumberPlayers(player: NumberPlayer)
                {override}+toString():String
            }

            class Trio implements NumberPlayerStrategy
            {
                {override}+setNumberPlayers(player: NumberPlayer)
                {override}+toString():String
            }

            class Quatro implements NumberPlayerStrategy
            {
                {override}+setNumberPlayers(player: NumberPlayer)
                {override}+toString():String
            }
        }

        GameModeFactory ..> GameMode : <<use>> >

        class GameModeFactory{
            +GameModeFactory()
            +createMiddleKingdom(): GameMode
            +createHarmony(): GameMode
        }

        abstract GameMode<<abstract>>{
            +GameMode()
            {abstract}+executeGameMode(player: Player) <<abstract>>: Boolean
            {abstract}+numberBonus() <<abstract>>: Integer
        }


            package mode{
                class MiddleKingdom extends GameMode{
                    {override}+executeGameMode(player: Player): Boolean
                    {override}+numberBonus(): Integer
                    {override}+toString():String
                }

                class Harmony extends GameMode{
                    {override}+executeGameMode(player: Player): Boolean
                    {override}+numberBonus(): Integer
                    {override}+toString():String
                }

                GameModeFactory ..> MiddleKingdom: <<use>> >
                GameModeFactory ..> Harmony: <<use>> >

                GameMode o-r-> Player : <<execute>> >
            }

    }

    interface NumberPlayerStrategy<<interface>>{
        +setNumberPlayers(player: NumberPlayer)
    }
}

package View #lightgreen;line:green{
    Window ..> KingDominoStart : <<use>> >

    class Window
    {
        -_numberPlayer: Integer
        -_instance: Window
        +Window(game:Game, controller:Controller)
        +setWindow()
        {static}+getInstance(game:Game, controller:Game):Window
        +getGame(): Game
        +getController(): Controller
        +getFrame(): Frame
        +getInstance(): Window
        +getFontGermania(): Font
        +getFontTimeless(): Font
        +getFontAugusta(): Font
        +getNumberPlayer(): Integer
        +setNumberPlayer(number: Integer)
    }

    class KingDominoStart implements Observer
    {
        -_strategyPlayers: String[]
        +KingDominoStart()
        +getInstancesWindow()
        {override}+upadteDominoesOnTable(game:Game)
        {override}+updateDominoPreview(game:Game)
        {override}+updatePlayerGraph(game:Game)
    }

    class KingDominoGame implements Observer
    {
        -_numberPlayer: Integer
        -_indexDominoClicked: Integer
        -_unicodeCrown: String
        -_castleIsSet: Boolean[]
        -_listGameModeString: String[]
        -_orderPlayerPrevious: String[]
        -_firstGame: Boolean
        -_dominoesAreChoosen: Boolean
        -_waitPlayerPutDomino: Boolean
        -_allDominoesAreSet: Boolean[]
        -_castleIsSet: Boolean[]
        -_roundNumber: Integer
        -_indexGraphClicked: Integer
        -_indexDominoClicked: Integer
        -_orderPlayerActual: Integer[]
        -_unicodeCrown: String

        +KingDominoGame()
        +getInstancesWindow()
        {override}+upadteDominoesOnTable(game:Game)
        {override}+updateDominoPreview(game:Game)
        {override}+updatePlayerGraph(game:Game)
        +setCrownRotation()
        +labelKingONDominoes()
        changeLabelKing()
        +createDominoes()
        +createGraph()
        +setBackgroudDominoGraph(x:Integer, y:Integer, condition:Boolean)
        +putDominoRotate()
        +setTextInformation(text: String)
        +allCastleSet()
        +firstLaunchGame()
        +otherLaunchGame()
        +addPlayerPlaceDomino()
        +nextPlayerToChooseDomino()
        +letPlayerSetDomino()
        +graphEnabled()
        +endGame()
        +createScorePlayer()
        +createRanking(): Integer[]
        +areDominoesAreChoosen(): Boolean
    }
}

package Controller #gold;line:goldenrod {

    class Controller{
        +Controller(game: Game)
        +instanciateDeck(numberPlayer: Integer)
        +putDominoOnTable()
        +switchToDuo()
        +switchToTrio()
        +switchToQuatro()
        +callHarmony()
        +callMiddleKingdom()
        +callRotationDomino(index: Integer)
        +callReverseDomino(index: Integer)
        +callSetDirectionDomino(index: Integer, direction:Integer)
        +setCastle(index:Integer, x:Integer, y:Integer)
        +setDominoOnGraph(index:Integer, indexPlayer:Integer, x:Integer, y:Integer)
        +addObserver(observer: Observer)
        +instantiateKingdominoGame()
        +calculScorePlayer()
    }

}

Window .> "1\n -_controller\t"Controller : <<use>> >
Window .> Game : "1\n -_game" <<use>> >
Window  .> "1\n -_fontGermania"FontUtilities : <<use>>
Window  .> "1\n -_fontTimeless"FontUtilities : <<use>>
Window  .> "1\n -_fontAugusta"FontUtilities : <<use>>

KingDominoStart .> "1\n-_window" Window : <<use>> >
KingDominoGame .> "1\n-_window" Window : <<use>> >

LauncherKingdomino ..> Window : <<create>> >
LauncherKingdomino ..> KingDominoStart : <<create>> >
LauncherKingdomino ..> Controller : <<create>> >
LauncherKingdomino .> Game : <<create>> >

Game  o--> "0..*\n-_listGameMode"GameMode : has >
Game  *--> NumberPlayer : "1\n-_numberPlayer{readOnly}" has >
Game  *-> "1\n-_deck" Deck : has >
Game  *--> "2..4\n-_listPlayers" Player : has >
Game o--> NumberPlayerStrategy : set >
Game o-l-> Observer : "0..*\n-_listObserver{readOnly}" notify >
Game *--> "1\n-_factoryGameMode{readOnly}"GameModeFactory : has >
Game o--> "3..4\n-_listActualDominoes" Domino : has >

NumberPlayer ..> Duo : <<use>> >
NumberPlayer ..> Trio : <<use>> >
NumberPlayer ..> Quatro : <<use>> >


Controller o--> "1\n-_game"Game : <<use>> >
Controller o--> Observer : add >
Controller ..> KingDominoGame : <<create>> >

King *-r-> "1\n-_kingColor" KINGCOLOR : has >

Deck .d.> CSVReader : <<use>> >

@enduml